ARG BASE_IMAGE=nvidia/opengl:1.2-glvnd-runtime-ubuntu20.04

FROM $BASE_IMAGE

# Use ARG - persists only during docker build
# https://github.com/moby/moby/issues/4032#issuecomment-192327844
ARG CATKIN_WORKSPACE=uav_ws
ARG HOME=/root
ARG USER=root
ENV DEBIAN_FRONTEND=noninteractive
ENV GITHUB_RUNNER=true
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install all the things to stop docker build from breaking
RUN ln -fs /usr/share/zoneinfo/Europe/Zagreb /etc/localtime && \
    apt-get update && apt-get install -q -y \
    git \
    sudo \
    lsb-release \
    gnupg2 \
    apt-utils \
    dialog \
    tzdata \
    curl \
    keyboard-configuration && \
    dpkg-reconfigure --frontend noninteractive tzdata 

# download public key for github.com
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# Install uav_ros_simulation and setup catkin workspace
WORKDIR $HOME
RUN --mount=type=ssh git clone git@github.com:larics/uav_ros_simulation.git
RUN --mount=type=ssh ./uav_ros_simulation/installation/install_and_setup_workspace.sh $CATKIN_WORKSPACE

# Build catkin workspace
WORKDIR $HOME/$CATKIN_WORKSPACE/src
RUN catkin build --limit-status-rate 0.2

# Build ardupilot binaries
RUN sudo ln -sf /usr/bin/python3 /usr/bin/python
WORKDIR $HOME/uav_ros_simulation/firmware/ardupilot
RUN modules/waf/waf-light configure --board sitl
RUN modules/waf/waf-light build --target bin/arducopter

# Prepare for startup
RUN echo "export PATH=\$HOME/.local/bin:\$PATH" >> $HOME/.bashrc
WORKDIR $HOME/uav_ros_simulation/startup/kopterworx_one_flying
